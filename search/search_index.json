{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#my-knowledge-base-of-fun-facts","title":"My Knowledge Base of Fun Facts","text":"<p>A collection of neat and interesting facts for quick reference, thoughtfully organized in one spot. This blog serves as:</p> <ul> <li>A personal knowledge base: A resource to revisit and use whenever needed for common that I like to use in my professional and personal life.</li> <li>A way to explore unique solutions: It highlights creative approaches to everyday problems.</li> <li>Not a best practices guide: This is more of a personal exploration than a definitive solution guide.</li> </ul>"},{"location":"Technical/Git/Deploying%20MKDocs/","title":"Overview","text":"<p>The gotchas I found while deploying mkdocs to github pages. </p>"},{"location":"Technical/Git/Deploying%20MKDocs/#github-action-permissions","title":"Github Action Permissions","text":"<p>Add the necessary Permissions to do write operations in the action:   This allows you to write back to the current repo you are working in. This is the part that I missed when I was first trying to set this up.</p>"},{"location":"Technical/Git/Deploying%20MKDocs/#configure-github-actions-to-build-your-site","title":"Configure Github Actions to build your site","text":"<p>I use poetry to manage my dependencies because of that I have to also ensure poetry is installed. The following yaml ensures poetry is installed, install the project dependencies, then deploys the github pages site. </p> <pre><code>name: Deploy Mkdocs Site\n\non:\n  push:\n    branches:\n      - main\nconcurrency:\n  group: deployment\n\njobs:\n  Run-Code-Validation:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Install Poetry\n        uses: snok/install-poetry@v1\n      - name: Set up Python 3.11\n        uses: actions/setup-python@v4\n        with:\n          python-version: 3.11\n          cache: 'poetry'\n      - name: Install dependencies\n        run: poetry install\n      - name: Deploy Site\n        run: poetry run mkdocs gh-deploy --force --clean\n</code></pre>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20All%20Together%20Now/","title":"Overview","text":"<p>This is the full configuration for the traefik web proxy. This Configuration is being used to proxy services run in the local environment as well as being remoted into a NATed network without any firewall holes. This is done by linking the machine to a machine in the DMZ via tailscale. </p>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20All%20Together%20Now/#sanitized-configuration-file","title":"Sanitized Configuration File","text":"<pre><code>version: '3.5'\n\nservices:\n  reverse-proxy:\n    # The official v2 Traefik docker image\n    image: traefik:latest\n    restart: always\n    container_name: reverseproxy\n    hostname: reverseproxy\n    environment:\n      - \"NAMECHEAP_API_USER=${NAMECHEAP_API_USER}\"\n      - \"NAMECHEAP_API_KEY=${NAMECHEAP_API_KEY}\"\n      - \"PUID=1000\"\n      - \"PGID=1000\"\n    command:\n      # Logging Flags\n      - \"--log.level=DEBUG\"\n      # - \"--log.level=INFO\"\n      - \"--log.filepath=/traefiklog/traefik.log\"\n      - \"--accesslog\"\n      # Admin Flags\n      - \"--api\"\n      # HTTP\n      - \"--entryPoints.web.address=:80\"\n      # HTTPS\n      - \"--entrypoints.websecure.address=:443\"\n      # HTTPS - Create Certificates\n      - \"--certificatesresolvers.le.acme.tlschallenge=true\"\n      - \"--certificatesresolvers.le.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}\"\n      - \"--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json\"\n      - \"--certificatesresolvers.le.acme.tlschallenge=true\"\n      # HTTPS - Create Certificates - dev\n      - \"--certificatesresolvers.leDev.acme.tlschallenge=true\"\n      - \"--certificatesresolvers.leDev.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}\"\n      - \"--certificatesresolvers.leDev.acme.storage=/letsencrypt/acme_dev.json\"\n      - \"--certificatesresolvers.leDev.acme.dnschallenge.provider=namecheap\"\n      - \"--certificatesresolvers.leDev.acme.dnschallenge.delaybeforecheck=30\"\n      - \"--certificatesresolvers.leDev.acme.httpchallenge.entrypoint=web\"\n      - \"--certificatesresolvers.leDev.acme.tlschallenge=true\"\n      # HTTPS - Create Certificates - dns\n      - \"--certificatesresolvers.ledns.acme.tlschallenge=true\"\n      - \"--certificatesresolvers.ledns.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}\"\n      - \"--certificatesresolvers.ledns.acme.storage=/letsencrypt/acme_dns.json\"\n      - \"--certificatesresolvers.ledns.acme.dnschallenge.provider=namecheap\"\n      - \"--certificatesresolvers.ledns.acme.dnschallenge.delaybeforecheck=30\"\n      - \"--certificatesresolvers.ledns.acme.tlschallenge=false\"\n      # HTTPS - Create Certificates - dns - dev\n      - \"--certificatesresolvers.lednsDev.acme.dnschallenge=true\"\n      - \"--certificatesresolvers.lednsDev.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}\"\n      - \"--certificatesresolvers.lednsDev.acme.storage=/letsencrypt/acme_dev_dns.json\"\n      - \"--certificatesresolvers.lednsDev.acme.dnschallenge.provider=namecheap\"\n      - \"--certificatesresolvers.lednsDev.acme.dnschallenge.delaybeforecheck=30\"\n      - \"--certificatesresolvers.lednsDev.acme.tlschallenge=false\"\n      ## For Dev Only\n      - \"--certificatesresolvers.leDev.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory\"\n      - \"--certificatesresolvers.lednsDev.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory\"\n\n      # Providers\n      ## Docker Provider\n      - \"--providers.docker\"\n      - \"--providers.docker.exposedbydefault=false\"\n      ## File Provider for Custom local services\n      - \"--providers.file=true\"\n      - \"--providers.file.directory=/traefikconfig/routes\"\n      - \"--providers.file.watch=true\"\n    labels:\n      # Global redirect to HTTPS\n      - \"traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)\"\n      - \"traefik.http.routers.http-catchall.entrypoints=web\"\n      - \"traefik.http.routers.http-catchall.middlewares=redirect-to-https\"\n      - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\"\n\n      # Dashboard over HTTPS\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.traefik.rule=Host(`dash.${DOCKER_TRAEFIK_DOMAIN}`)\"\n      - \"traefik.http.routers.traefik.service=api@internal\"\n      - \"traefik.http.routers.traefik.tls.certresolver=le${DOCKER_CERT_RESOLVER_SUFFIX}\"\n      - \"traefik.http.routers.traefik.entrypoints=websecure\"\n      - \"traefik.http.middlewares.ipwhitelist.ipwhitelist.sourcerange=${DOCKER_TRAEFIK_WHITELIST}\"\n      - \"traefik.tcp.middlewares.ipwhitelist.ipwhitelist.sourcerange=${DOCKER_TRAEFIK_WHITELIST}\"\n      - \"traefik.http.routers.traefik.middlewares=ipwhitelist\"\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n      # The Web UI (enabled by --api.insecure=true)\n      - \"8080:8080\"\n    volumes:\n      # Allows Traefik to listen to the Docker events\n      - \"/var/run/docker.sock:/var/run/docker.sock:ro\"\n      # Allows Certificate Storage across Sessions\n      - \"${DOCKER_HOME}/traefik/letsencrypt:/letsencrypt\"\n      # Used in the file Provider\n      - \"${DOCKER_TRAEFIK_FILE_PROVIDER}:/traefikconfig/routes\"\n      # Log File\n      - \"${DOCKER_LOGS}/traefik/log:/traefiklog\"\n      # ???\n      - \"${DOCKER_HOME}/traefik/data:/traefik\"\n    networks:\n      - traefik\n      - traefik-proxy\n\nnetworks:\n  traefik:\n    name: traefik\n    external: true\n  traefik-proxy:\n    name: traefik-proxy\n    external: false\n</code></pre>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20All%20Together%20Now/#environment-variables-to-be-configured","title":"Environment Variables to be configured","text":"<ul> <li>DOCKER_TRAEFIK_DOMAIN<ul> <li>The domain name that will be used. This should have a wildcard domain entry in your dns provider. This will allow you to add additional configuration without updating your domain.</li> </ul> </li> <li>DOCKER_HOME<ul> <li>Where all of your docker volumes are located. </li> </ul> </li> <li>DOCKER_TRAEFIK_FILE_PROVIDER<ul> <li>Where the files are located for the traefik file provider</li> </ul> </li> <li>DOCKER_LOGS<ul> <li>Where the docker logs should be saved. </li> </ul> </li> <li>DOCKER_CERT_RESOLVER_SUFFIX<ul> <li>A quick way to change whether we are using the dev or prod version of the certificate resolvers</li> <li>This should be set to either \u2018Dev\u2019 or not set at all. </li> </ul> </li> <li>DOCKER_TRAEFIK_LETSENCRYPT_EMAIL<ul> <li>The email that will be used to register with letsencrypt. </li> </ul> </li> <li>NAMECHEAP_API_USER<ul> <li>The namecheap user to be used when using dns verification. </li> <li>If you are not using namecheap you will need to update this to match your dns provider.</li> </ul> </li> <li>NAMECHEAP_API_KEY<ul> <li>The namecheap api key.</li> <li>If you are not using namecheap you will need to update this to match your dns provider.</li> </ul> </li> <li>DOCKER_TRAEFIK_WHITELIST<ul> <li>The whitelist that will be used to only allow some IPs to access the services assigned this middleware.</li> </ul> </li> </ul>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/","title":"Overview","text":"<p>This page will break down the parts of the Command in the  docker file. This will allow you to extend it if you have to. </p> <p>Configuring the command to do what I wanted and the labels is something that when I first dived into setting up my setup I struggled to understand. </p>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#command-breakdown","title":"Command Breakdown","text":""},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#logging-setup","title":"Logging Setup","text":"<pre><code>    command:\n      # Logging Flags\n      # - \"--log.level=DEBUG\"\n      - \"--log.level=INFO\"\n      - \"--log.filepath=/traefiklog/traefik.log\"\n      - \"--accesslog\"\n</code></pre> <ul> <li><code>--log.level</code> <ul> <li>sets the log level</li> </ul> </li> <li><code>--log.filepath</code><ul> <li>Sets the filepath of where to save the traefik logs</li> </ul> </li> <li><code>--accesslog</code><ul> <li>Enables the access log</li> </ul> </li> </ul>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#enable-api","title":"Enable API","text":"<pre><code>      # Admin Flags\n      - \"--api\"\n</code></pre> <p>This enables the Admin api, and the dashboard.</p>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#ports-to-listen-on","title":"Ports to listen on","text":"<pre><code>      # HTTP\n      - \"--entryPoints.web.address=:80\"\n      # HTTPS\n      - \"--entrypoints.websecure.address=:443\"\n</code></pre> <p><code>--entryPoints.web.address</code> sets the listening port. The one described here is named web. If you want to change that name you can rename it to whatever you need. In the example above you can see a similar one named <code>websecure</code>. In this example, <code>web</code> is setup to accept traffic on port 80 (which is typically http),  <code>websecure</code> is setup to accept traffic on port 80 (which is typically https). </p>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#letsencrypt-https-certificate-verification-setup","title":"LetsEncrypt - HTTPS Certificate Verification Setup","text":"<pre><code>     # HTTPS - Create Certificates\n      - \"--certificatesresolvers.le.acme.tlschallenge=true\"\n      - \"--certificatesresolvers.le.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}\"\n      - \"--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json\"\n      - \"--certificatesresolvers.le.acme.httpchallenge=false\"\n      - \"--certificatesresolvers.le.acme.httpchallenge.entrypoint=web\"\n\n      # HTTPS - Create Certificates - dev\n      - \"--certificatesresolvers.leDev.acme.tlschallenge=true\"\n      - \"--certificatesresolvers.leDev.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}\"\n      - \"--certificatesresolvers.leDev.acme.storage=/letsencrypt/acme_dev.json\"\n      - \"--certificatesresolvers.leDev.acme.httpchallenge=false\"\n      - \"--certificatesresolvers.leDev.acme.httpchallenge.entrypoint=web\"\n      - \"--certificatesresolvers.leDev.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory\"\n</code></pre> <p>Similarly to the configuration on the ports. We also have the ability to name the certificate resolvers. The certificate resolvers in this configuration are named <code>le</code> and <code>leDev</code>. The Dev configuration should be used if you are testing something, and the certificate may not be persisted. Letsencrypt has a rate limit in its \u201cProd\u201d  API. It has a lot less restrictive limit in place for staging. </p> <ul> <li><code>--certificatesresolvers.le.acme.tlschallenge=true</code> - Enables the tls challenge</li> <li><code>--certificatesresolvers.le.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}</code> - Sets the email that will be used to register with letsencrypt. </li> <li><code>--certificatesresolvers.le.acme.storage=/letsencrypt/acme.json</code> - Sets the location and file location to save the certificates that are generated with this certificate resolver.</li> <li><code>--certificatesresolvers.leDev.acme.httpchallenge=false</code> - Enable the http challenge</li> <li><code>--certificatesresolvers.leDev.acme.httpchallenge.entrypoint=web</code> - the entry point to use if httpchallenge is enabled.</li> <li><code>--certificatesresolvers.leDev.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory</code> - Sets the staging url to get a less restrictive rate limit</li> </ul>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#letsencrypt-dns-certificate-verification-setup","title":"LetsEncrypt - DNS Certificate Verification Setup","text":"<pre><code>      # HTTPS - Create Certificates - dns\n      - \"--certificatesresolvers.ledns.acme.dnschallenge=true\"\n      - \"--certificatesresolvers.ledns.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}\"\n      - \"--certificatesresolvers.ledns.acme.storage=/letsencrypt/acme_dns.json\"\n      - \"--certificatesresolvers.ledns.acme.dnschallenge.provider=namecheap\"\n      - \"--certificatesresolvers.ledns.acme.dnschallenge.delaybeforecheck=30\"\n      # HTTPS - Create Certificates - dns - dev\n      - \"--certificatesresolvers.lednsDev.acme.dnschallenge=true\"\n      - \"--certificatesresolvers.lednsDev.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}\"\n      - \"--certificatesresolvers.lednsDev.acme.storage=/letsencrypt/acme_dev_dns.json\"\n      - \"--certificatesresolvers.lednsDev.acme.dnschallenge.provider=namecheap\"\n      - \"--certificatesresolvers.lednsDev.acme.dnschallenge.delaybeforecheck=30\"\n      - \"--certificatesresolvers.lednsDev.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory\"\n</code></pre> <ul> <li><code>--certificatesresolvers.ledns.acme.dnschallenge=true</code> - Enables the dns challenge</li> <li><code>--certificatesresolvers.ledns.acme.email=${DOCKER_TRAEFIK_LETSENCRYPT_EMAIL}</code> - Sets the email that will be used to register with letsencrypt.</li> <li><code>--certificatesresolvers.ledns.acme.storage=/letsencrypt/acme_dns.json</code> -  Sets the location and file location to save the certificates that are generated with this certificate resolver.</li> <li><code>--certificatesresolvers.lednsDev.acme.dnschallenge.provider=namecheap</code> - Your dns provider</li> <li><code>--certificatesresolvers.lednsDev.acme.dnschallenge.delaybeforecheck=30</code> - Sets the amount of time to wait until letsencrypt should check for the dns challenge to be setup.</li> <li><code>--certificatesresolvers.lednsDev.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory</code> - Sets the staging url to get a less restrictive rate limit</li> </ul>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#configuration-providers","title":"Configuration Providers","text":""},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#docker-provider","title":"Docker Provider","text":"<pre><code>      # Providers\n      ## Docker Provider\n      - \"--providers.docker\"\n      - \"--providers.docker.exposedbydefault=false\"\n</code></pre> <ul> <li><code>--providers.docker</code> - Enables the docker provider</li> <li><code>--providers.docker.exposedbydefault=false</code> - Sets whether any docker container that is deployed should be enabled. </li> </ul>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Command%20Breakdown/#file-provider","title":"File Provider","text":"<pre><code>      ## File Provider for Custom local services\n      - \"--providers.file=true\"\n      - \"--providers.file.directory=/traefikconfig/routes\"\n      - \"--providers.file.watch=true\"\n</code></pre> <ul> <li><code>--providers.file=true</code> - Enable the file provider</li> <li><code>--providers.file.directory=/traefikconfig/routes</code> - Where to watch </li> <li><code>--providers.file.watch=true</code> - Should we only watch the folder or only update when traefik is started.</li> </ul>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Labels%20Breakdown/","title":"Overview","text":"<p>This page will break down the parts of the Label in the docker file. This will allow you to extend it if you have to. Additional this will show you some of the configuration available to you for exposing a docker image.</p> <p>Configuring the command to do what I wanted and the labels is something that when I first dived into setting up my setup I struggled to understand. </p>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Labels%20Breakdown/#labels-breakdown","title":"Labels Breakdown","text":""},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Labels%20Breakdown/#global-http-redirect","title":"Global HTTP Redirect","text":"<pre><code>    labels:\n      # Global redirect to HTTPS\n      - \"traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)\"\n      - \"traefik.http.routers.http-catchall.entrypoints=web\"\n      - \"traefik.http.routers.http-catchall.middlewares=redirect-to-https\"\n      - \"traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https\"\n</code></pre> <p>There are two different things that you can decide the name for here: <code>http-catchall</code> and <code>redirect-to-https</code></p> <ul> <li><code>traefik.http.routers.http-catchall.rule=hostregexp('{host:.+}')</code> - sets what urls to match on. This particular rule uses a regular expression. </li> <li><code>traefik.http.routers.http-catchall.entrypoints=web</code> - Sets the entrypoint to attach to this router on. </li> <li><code>traefik.http.routers.http-catchall.middlewares=redirect-to-https</code> - What middlewares to use when this router is activated. This can be a list if multiple are needed. </li> </ul>"},{"location":"Technical/Infrastructure/Traefik/Docker%3A%20Labels%20Breakdown/#enable-the-traefik-dashboard","title":"Enable the Traefik Dashboard","text":"<pre><code>      # Dashboard over HTTPS\n      - \"traefik.enable=true\"\n      - \"traefik.http.routers.traefik.rule=Host(`dash.${TRAEFIK_DOMAIN}`)\"\n      - \"traefik.http.routers.traefik.service=api@internal\"\n      - \"traefik.http.routers.traefik.tls.certresolver=le${DOCKER_CERT_RESOLVER_SUFFIX}\"\n      - \"traefik.http.routers.traefik.entrypoints=websecure\"\n      - \"traefik.http.middlewares.ipwhitelist.ipwhitelist.sourcerange=${DOCKER_TRAEFIK_WHITELIST}\"\n      - \"traefik.tcp.middlewares.ipwhitelist.ipwhitelist.sourcerange=${DOCKER_TRAEFIK_WHITELIST}\"\n      - \"traefik.http.routers.traefik.middlewares=ipwhitelist\"\n</code></pre> <p>This is how you expose a container that is exposed via docker. You can customize the name <code>traefik</code> when updating other routers. This specific rule exposes the dashboard for traefik. </p> <ul> <li><code>traefik.enable=true</code> - Enables the exposure of this container</li> <li><code>traefik.http.routers.traefik.rule=Host('dash.${TRAEFIK_DOMAIN}')</code> - The exact domain to match.</li> <li><code>traefik.http.routers.traefik.service=api@internal</code> - The service that is already configured in traefik that should be used with this configuration</li> <li><code>traefik.http.routers.traefik.tls.certresolver=le${DOCKER_CERT_RESOLVER_SUFFIX}</code> - The certificate resolver to use to generate a certificate.</li> <li><code>traefik.http.routers.traefik.entrypoints=websecure</code> - The entrypoint to use to access the service. </li> <li><code>traefik.http.middlewares.ipwhitelist.ipwhitelist.sourcerange=${DOCKER_TRAEFIK_WHITELIST}</code> - Configures the whitelist for http services</li> <li><code>traefik.tcp.middlewares.ipwhitelist.ipwhitelist.sourcerange=${DOCKER_TRAEFIK_WHITELIST}</code> - Configure the whitelist for tcp services</li> <li><code>traefik.http.routers.traefik.middlewares=ipwhitelist</code> - Assign the whitelist as a middleware to the traefik router. </li> </ul>"},{"location":"Technical/Python/Graceful%20Shutdown/","title":"Overview","text":"<p>This Describes the process of allowing your program to gracefully shutdown instead of being force quit suddently. Allowing you to close things down correctly instead of leaving things hanging. </p>"},{"location":"Technical/Python/Graceful%20Shutdown/#python-class-needed","title":"Python Class Needed","text":"<pre><code>import signal\nimport time\n\nclass GracefulShutdown:\n  kill_now = False\n\n  def __init__(self):\n      \"\"\"The initializer to start watching for sigint, and sigterm signals.\"\"\"\n    signal.signal(signal.SIGINT, self.exit_gracefully)\n    signal.signal(signal.SIGTERM, self.exit_gracefully)\n\n  def exit_gracefully(self, *args):\n    \"\"\"Update the saved value of kill_now to be true to let who ever is watching know its time to start shutting down.\"\"\"\n    self.kill_now = True\n</code></pre>"},{"location":"Technical/Python/Graceful%20Shutdown/#_1","title":"Graceful Shutdown","text":"<p>Source: https://stackoverflow.com/questions/18499497/how-to-process-sigterm-signal-gracefully</p>"},{"location":"Technical/Python/Logging%20Preferences/","title":"Overview","text":"<p>This describes how I like to configure my logging for python projects that I write. Including the log output format. </p>"},{"location":"Technical/Python/Logging%20Preferences/#getting-started","title":"Getting Started","text":""},{"location":"Technical/Python/Logging%20Preferences/#in-the-file-that-launches-your-python-program","title":"In the file that launches your python program","text":"<pre><code>import logging\n\nlog_format = \"%(asctime)s - %(levelname)s - %(filename)S:%(funcname)s:%(lineno)d - %(message)s\"\nlogging.basicConfig(format=log_format)\n\nlogger = logging.getLogger()\n</code></pre>"},{"location":"Technical/Python/Logging%20Preferences/#description-of-python-code","title":"Description of Python Code","text":"<ol> <li>Import the logging module<ul> <li>Allows us to use the internal logging module in python</li> </ul> </li> <li>Set up the log format, this sets up a standard log format that will be used across your file. The documentation for what is available is located here. My Logstring does the following. I found that it helps me with debugging by having it setup this way.<ul> <li>\u201d%(asctime)s - %(levelname)s - %(filename)S:%(funcname)s:%(lineno)d - %(message)s</li> <li>asctime - The time the log was sent</li> <li>levelname - The log level that was use to send the message</li> <li>filename - The file the log was sent from</li> <li>funcname - The function the log was sent from</li> <li>lineno - The line number the log was sent from</li> <li>message - The log message</li> </ul> </li> <li>Configure the logging library with the format.</li> <li>get a logger instance.</li> </ol>"},{"location":"Technical/Python/Logging%20Preferences/#after-configured-logging-usage","title":"After Configured Logging Usage","text":"<pre><code>import logging\n\nlogger = logging.getLogger()\n</code></pre> <p>The logger here is configured with the configuration that was applied in the main file so that only needs to be configured in one location and then the other loggers in the module pick up that configuration. </p>"},{"location":"Technical/Python/Preferred%20Pre-commit%20Config/","title":"Overview","text":"<p>Below is my example pre-commit yaml configuration. It does some general file parsing, then it checks python files for the configured ruff linting and formatting rules.</p> <pre><code># See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v3.2.0\n    hooks:\n    -   id: trailing-whitespace\n    -   id: end-of-file-fixer\n    -   id: check-yaml\n    -   id: check-added-large-files\n  - repo: https://github.com/astral-sh/ruff-pre-commit\n    # Ruff version.\n    rev: v0.11.2\n    hooks:\n      - id: ruff\n        args: [ \"--fix\", \"src\"]\n      - id: ruff-format\n        args: [ src ]\n</code></pre>"},{"location":"Technical/Python/Preferred%20Ruff%20Config/","title":"Overview","text":"<p>Below is the ruff config that I like to use as a starting point in my pyproject.toml files.</p> <pre><code>[tool.ruff]\n# Rules that are available to use: https://beta.ruff.rs/docs/rules/\nlint.select = [\n    \"E\", \"W\", # PyCodestyle\n    \"F\", # PyFlakes\n    \"D\", # PyDocstyle\n    \"PT\", # Flake 8 - pytest style\n    \"N\", # Flake 8 - Naming\n    \"ICN\", # Flake 8 - Import Conventions\n    \"PTH\", # Flake 8 - Use Pathlib\n    \"TD\", # Flake 8 - TO DO Style\n    \"T20\", # Flake 8 - No Print\n    \"SLF\", # Flake 8 - Protect Private Methods\n    \"SIM\", # Flake 8 - Simplify the Code\n    \"ISC\", # Flake 8 - Sting Concatenation\n    \"COM\", # Flake 8 - Comma Conventions\n    \"RSE\", # Flake 8 - Raise Patterns\n    \"C4\", # Flake 8 - Conprehensions Patterns\n    \"FBT\", # Flake 8 - Boolean Patterns\n]\nlint.ignore = [\n    \"COM812\", # Trailing comma missing - conflicts with formatting\n    \"D100\",   # Missing docstring in public module - Generally the code written is for me, so I don't require it.\n    \"D104\",   # Missing docstring in public package - Generally the code written is for me, so I don't require it.\n    \"D203\",   # 1 blank line required before class docstring - conflicts with ruff formatting\n    \"D205\",   # 1 blank line required between summary line and description\n    \"D212\",   # Multi-line docstring summary should start at the first line - I like when they start before the \"\"\"\n    \"D401\",   # First line of docstring should be in imperative mood: \"{first_line}\" - I will set the mood I use.\n    \"TD002\",  # Missing to do author - I don't care who wrote it.\n    \"TD003\",  # Missing to do issue - I don't use an issue tracker for personal repos\n]\n\n\n# Allow autofix for all enabled rules (when `--fix`) is provided.\nlint.fixable = [\"ALL\"]\nline-length = 120\n</code></pre>"},{"location":"Technical/Python/Settings%20Management/","title":"Overview","text":"<p>Below you will find my settings management. This is the pattern that I like to follow, to easily maintain settings via a common interface.</p>"},{"location":"Technical/Python/Settings%20Management/#python-code","title":"Python Code:","text":"<p>This sets up the configuration for four different environments. Through inheritance it can override just the variables that are environment specific. </p> <pre><code>import os\nfrom functools import lru_cache\n\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\n\n\nclass Settings(BaseSettings):\n    \"\"\"Base Settings class where all values should be defined.\"\"\"\n    model_config = SettingsConfigDict(env_prefix='PROJECT_PREFIX_')\n    # Test Configuration\n    debug: bool = True\n\n\nclass PyTestingSettings(Settings):\n    \"\"\"Settings for the app when it is run for Testing.\"\"\"\n\n    # Test Configuration\n    debug: bool = False\n\n\nclass DockerSettings(Settings):\n    \"\"\"Settings for the app when it is run in Docker.\"\"\"\n\n    whisper_model: str = 'turbo'\n\n\nclass ProductionSettings(DockerSettings):\n    \"\"\"Settings for the app when it is run in Production.\"\"\"\n\n    # Test Configuration\n    debug: bool = False\n\n@lru_cache()\ndef get_settings(*, override_environment: str = None) -&gt; Settings:\n    \"\"\"Get the settings based on the environment.\"\"\"\n    env = os.getenv(\"PROJECT_PREFIX_ENVIRONMENT\", \"production\")\n    if override_environment:\n        env = override_environment\n    env = env.lower()\n    if env == \"development\":\n        return Settings()\n    elif env == \"docker\":\n        return DockerSettings()\n    elif env == \"testing\":\n        return PyTestingSettings()\n    else:\n        return ProductionSettings()\n</code></pre>"}]}